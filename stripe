route.ts: 

import { getServerSession } from "next-auth/next"
import { z } from "zod"

import { authOptions } from "@/lib/auth"
import { stripe } from "@/lib/stripe"
import { getUserSubscriptionPlan } from "@/lib/subscription"
import { absoluteUrl } from "@/lib/utils"

const billingUrl = absoluteUrl("/")

export async function GET(
  request: Request,
  { params }: { params: { priceId: string } }
) {
  console.log(params.priceId)
  try {
    const session = await getServerSession(authOptions)

    if (!session?.user || !session?.user.email) {
      return new Response(null, { status: 403 })
    }

    const subscriptionPlan = await getUserSubscriptionPlan(session.user.id)

    // The user is on the pro plan.
    // Create a portal session to manage tion.
    if (subscriptionPlan.isPro && subscriptionPlan.stripeCustomerId) {
      const stripeSession = await stripe.billingPortal.sessions.create({
        customer: subscriptionPlan.stripeCustomerId,
        return_url: billingUrl
      })

      return new Response(JSON.stringify({ url: stripeSession.url }))
    }

    // The user is on the free plan.
    // Create a checkout session to upgrade.
    const stripeSession = await stripe.checkout.sessions.create({
      success_url: billingUrl,
      cancel_url: billingUrl,
      payment_method_types: ["card"],
      mode: "subscription",
      billing_address_collection: "auto",
      allow_promotion_codes: true,
      customer_email: session.user.email,
      client_reference_id: "true",
      line_items: [
        {
          price: params.priceId,
          quantity: 1,

        },
      ],

      metadata: {
        userId: session.user.id,
      },
    })

    return new Response(JSON.stringify({ url: stripeSession.url }))
  } catch (error) {
    if (error instanceof z.ZodError) {
      return new Response(JSON.stringify(error.issues), { status: 422 })
    }

    return new Response(null, { status: 500 })
  }
}



/lib/subscription.ts: 

// @ts-nocheck
// TODO: Fix this when we turn strict mode on.
import { freePlan, proPlan } from "@/config/subscriptions"
import { db } from "@/lib/db"
import { UserSubscriptionPlan } from "types"

export async function getUserSubscriptionPlan(
  userId: string
): Promise<UserSubscriptionPlan> {
  const user = await db.user.findFirst({
    where: {
      id: userId,
    },
    select: {
      stripeSubscriptionId: true,
      stripeCurrentPeriodEnd: true,
      stripeCustomerId: true,
      stripePriceId: true,
    },
  })

  if (!user) {
    throw new Error("User not found")
  }

  // Check if user is on a pro plan.
  const isPro =
    user.stripePriceId &&
    user.stripeCurrentPeriodEnd?.getTime() + 86_400_000 > Date.now()

  const plan = isPro ? proPlan : freePlan

  return {
    ...plan,
    ...user,
    stripeCurrentPeriodEnd: user.stripeCurrentPeriodEnd?.getTime(),
    isPro,
  }
}


index.d.ts: 
export type UserSubscriptionPlan = SubscriptionPlan &
  Pick<User, "stripeCustomerId" | "stripeSubscriptionId"> & {
    stripeCurrentPeriodEnd: number
    isPro: boolean
  }



subscription.ts:
import { SubscriptionPlan } from "types"


export const freePlan: SubscriptionPlan = {
  name: "Free",
  description:
    "features free plan",
  stripePriceId: "",
}

export const proPlan: SubscriptionPlan = {
  name: "PREMIUM",
  description: "features plano premium",
  stripePriceId: process.env.NEXT_PUBLIC_STRIPE_PRO_MONTHLY_PLAN_ID  ?? "",
}


export const proYearlyPlan: SubscriptionPlan = {
  name: "PREMIUM ANUAL",
  description: "features plano premium",
  stripePriceId: process.env.NEXT_PUBLIC_STRIPE_PRO_YEARLY_PLAN_ID ?? "",
}
